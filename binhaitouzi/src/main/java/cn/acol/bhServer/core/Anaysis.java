package cn.acol.bhServer.core;


import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import cn.acol.bhServer.core.exception.AnaysisException;
import cn.acol.bhServer.core.utils.CRCUtils;
import cn.acol.bhServer.core.utils.Util;
import cn.acol.scada.core.dto.UpRecordDto;

public class Anaysis {
	ResponseType responseType = null;
	SocketData socketData;
	public Anaysis(SocketData socketData) {
		this.socketData = socketData;
	}
	private String headerInfo;
	private Check check = Check.getInStance();
	private String deviceNum = null;//设备号
	private String localNum = null;//远传表位置号
	private String userNum = null;//用户号
	private Date upTime = null;
	List<UpRecordDto> lists =null;
	public ResponseType anaysisType() throws AnaysisException{
		if(responseType !=null) {
			return responseType;
		}
		if(socketData.data[0]==0x40 && socketData.data[1] == 0x40) {
			headerInfo = Util.bytesToString(socketData.data, socketData.len);
			if(headerInfo.contains("@@") && headerInfo.contains("IP:")&& headerInfo.contains("##")) {
				responseType = ResponseType.ResponseHeader;
				return responseType;
			}
		}
		boolean dataCheck = check.dataCheck(socketData.data, socketData.len);
		if(dataCheck == false) {
			throw new AnaysisException("crc校验值没有通过"+bytesToHexString(socketData.data, 0, socketData.len, "-")+"数据长度为："+socketData.len);
		}
		if(dataCheck) {
			if(socketData.data[0] == 0x3E && (socketData.data[3] == 0x09|| socketData.data[3]==0x08 ||socketData.data[3] == 0x11)) {
				int length =  (byteToInt(socketData.data[1])<<8) | byteToInt(socketData.data[2]);
				if(length != socketData.len) {
					throw new AnaysisException("报文中的长度 与 实际收到的长度不符合");
				}
				responseType = ResponseType.upRecordsResponse;//上传小时记录
				return responseType;
			}
		}
		
		throw new AnaysisException("即不是头IP ICCID信息  也不是小时记录上传信息");
	}
	public String getIccid() throws AnaysisException {
		if(anaysisType() == ResponseType.ResponseHeader) {
			//return headerInfo.substring(2, 15);
			return headerInfo.substring(headerInfo.indexOf("@@")+2,headerInfo.indexOf("IP"));
		}
		return null;
	}
	
	public Float getVolt() throws  AnaysisException {
		if(anaysisType() == ResponseType.ResponseHeader) {
			try {
				int index = headerInfo.indexOf("##");
				if(index+4>headerInfo.length()) {
					throw new AnaysisException("无法解析此数据"+headerInfo);
				}
				return Float.parseFloat(headerInfo.substring(index+2,index+4))/10;
			}catch (NumberFormatException e) {
				// TODO: handle exception
				new AnaysisException("数据为第一次上传 但是电压解析错误 报文ASCII为："+headerInfo);
			}
		}
		return null;
	}
	public static String bytesToHexString(byte[] src, int offset, int len) {
		StringBuilder stringBuilder = new StringBuilder("");
		if (src == null || len <= 0) {
			return null;
		}
		for (int i = offset; i < offset+len; i++) {
			int v = src[i] & 0xFF;
			String hv = Integer.toHexString(v);
			if (hv.length() < 2) {
				stringBuilder.append(0);
			}
			stringBuilder.append(hv);
		}
		return stringBuilder.toString();
	}
	private static DateFormat df = new SimpleDateFormat("yyMMddHHmmss");
	public static int byteToInt(byte b) {
		return b&0xff;
	}
	
	private static long byteToLong(byte b) {
		return (long)(b&0xff);
	}

	public static double bytes2Double(byte[] arr,int offset) {
		return Double.longBitsToDouble(bytes2Long(arr,offset));
	}
	public static long bytes2Long(byte[] arr,int offset) {
		long value = 0;
		for (int i = offset; i < offset+8; i++) {
			value |= byteToLong(arr[i]) << (8 * (7-(i-offset))); //offset个移动7 offset+1个移动6
		}
		return value;
	}
	public static float byte2Float(byte[] arr,int offset) {
		int value = 0;
		for(int i=offset;i<offset+4;i++) {
			value |= byteToInt(arr[i]) << (8 * (3-(i-offset)));
		}
		return Float.intBitsToFloat(value);
	}
	public static double d(long a) {
		return a;
	}
	public static String bytesToHexString(byte[] src, int offset, int len,String separator) {
		StringBuilder stringBuilder = new StringBuilder("");
		if (src == null || len <= 0) {
			return null;
		}
		for (int i = offset; i < offset+len; i++) {
			int v = src[i] & 0xFF;
			String hv = Integer.toHexString(v);
			if (hv.length() < 2) {
				stringBuilder.append(0);
			}
			stringBuilder.append(hv);
			if(i<len-1) {//不是最后一个
				stringBuilder.append(separator);
			}
		}
		return stringBuilder.toString();
	}
	public static void main(String[] args) throws AnaysisException {
		//double d = 0.085;
		double d = 0.021;
		double pi = 3.1415926;
		int N = 5*1000;
		for(int i = 0;i<10;i++) {
			System.out.println("压差为： "+5*i+"   公斤数为："+pi*d*d/4*N*i/10);
		}
		byte[] arr = new byte[] {0x40, 0x75, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00};
		//byte[] arr1 = new byte[] {0x41, 0x04, (byte) 0xA5, (byte) 0xF8, 0x18, (byte) 0x90, 0x00, 0x00};
		System.out.println(bytes2Double(arr, 0));
		System.out.println(byte2Float(new byte[] {0x41,(byte) 0xA0,0x00,0x00}, 0));
		long a =100000;
		System.out.println(d(a));
		System.out.println(changeBcdToFloat(new byte[] {0,0,0,0}, 0, 4, 100) == 0);
		SocketData socketData = new SocketData(new byte[100]);
		
		//int[] datas = new int[] //{0x3C,0x00,0x0C,0x18,0x19,0x01,0x18,0x19,0x42,0x15,0x31,0x52
	//			{0x3E, 0x01, 0x87, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 0x10, 0x01, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x19, 0x01, 0x25, 0x14, 0x29, 0x15, 0x07, 0x19, 0x01, 0x25, 0x08, 0x00, 0x08, 0x40, 0x76, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x25, 0x09, 0x00, 0x17, 0x40, 0x76, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x25, 0x10, 0x00, 0x20, 0x40, 0x76, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x25, 0x11, 0x00, 0x24, 0x40, 0x76, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x25, 0x12, 0x00, 0x24, 0x40, 0x76, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x25, 0x13, 0x00, 0x27, 0x40, 0x76, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x25, 0x14, 0x00, 0x02, 0x40, 0x76, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x14, 0x00, 0x01, 0x01, 0xCB, 0xD4
//};            
//{0x3c,0x00, 0x2D, 0x3f, 0x01, 0x3b, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x25, 0x17, 0x01, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0xf1,0xb7};

	//			{0x3E, 0x04, 0xD8, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 0x10, 0x01, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x19, 0x01, 0x17, 0x14, 0x59, 0x05, 0x19, 0x01, 0x17, 0x10, 0x35, 0x08, 0x40, 0x75, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x17, 0x10, 0x35, 0x14, 0x40, 0x75, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x17, 0x10, 0x35, 0x20, 0x40, 0x75, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x17, 0x10, 0x35, 0x25, 0x40, 0x75, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x17, 0x10, 0x35, 0x31, 0x40, 0x75, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x17, 0x10, 0x35, 0x37, 0x40, 0x75, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x17, 0x10, 0x35, 0x43, 0x40, 0x75, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x17, 0x10, 0x35, 0x49, 0x40, 0x75, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x17, 0x10, 0x35, 0x55, 0x40, 0x75, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x17, 0x10, 0x36, 0x01, 0x40, 0x75, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x17, 0x10, 0x36, 0x06, 0x40, 0x75, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x17, 0x10, 0x36, 0x12, 0x40, 0x75, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x17, 0x10, 0x36, 0x18, 0x40, 0x75, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x17, 0x10, 0x36, 0x24, 0x40, 0x75, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x17, 0x10, 0x36, 0x30, 0x40, 0x75, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x17, 0x10, 0x36, 0x36, 0x40, 0x75, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x17, 0x10, 0x36, 0x42, 0x40, 0x75, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x17, 0x10, 0x36, 0x47, 0x40, 0x75, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x17, 0x10, 0x36, 0x53, 0x40, 0x75, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x17, 0x10, 0x36, 0x59, 0x40, 0x75, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x17, 0x10, 0x37, 0x05, 0x40, 0x75, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x17, 0x10, 0x37, 0x11, 0x40, 0x75, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x17, 0x10, 0x37, 0x17, 0x40, 0x75, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x17, 0x10, 0x37, 0x23, 0x40, 0x75, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xA0, 0x00, 0x00, 0x42, 0xCA, 0xA6, 0x66, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x14, 0x00, 0x01, 0x01, 0x6B, 0x4F
//};//{0x3C,0x00,0x06,0x15,0xCE,0x10B};
	/*	socketData.data =new byte[datas.length];
		for(int i=0;i<datas.length;i++) {
			socketData.data[i] = (byte)datas[i];
		}*/
		socketData.data = new byte[]{0x3c,0x00,0x0c,0x04,(byte) 0xdd,(byte) 0xc2,0x66,(byte) 0x8d,(byte) 0xae,0x08,0x6d,0x0b};
				/*{0x3E,0x00,0x52,0x09,
				 			0x00,0x01,0x23,0x45,0x67,(byte) 0x89,0x01,0x23,
							(byte) 0xff,(byte) 0xff,(byte) 0xff,0x01,0x23,0x45,0x67,(byte) 0x89,
							0x01,0x23,0x45,0x67,(byte) 0x89,0x10,
							//0x15,0x05,0x19,0x08,0x00,0x58,0x00,
							0x15,0x05,0x19,0x08,0x00,0x58,
							0x41,0x04,(byte) 0xA5,(byte) 0xf8,0x18,(byte) 0x90,0x00,0x00,
							0x41,0x11,0x26,0x64,0x18,(byte) 0x94,0x00,0x00,
							0x00,0x00,0x00,0x00,
							0x00,0x00,0x00,0x00,
							0x41,(byte) 0xa0,0x00,0x00,
							0x42,(byte) 0xca,(byte) 0xa6,0x68,
							0x00,0x00,0x04,(byte) 0xd0,
							0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
							0x00,0x01,0x00,0x00,
							(byte) 0xf5,(byte) 0xbb};*/
		socketData.len = socketData.data.length;
		System.out.println(bytesToHexString(socketData.data, 0, socketData.len, " "));
		System.out.println(socketData.len);
		int calcCrc16 = CRCUtils.calcCrc16(socketData.data, 0, socketData.len-2);
		System.out.println(calcCrc16);
		Anaysis anaysis = new Anaysis(socketData);
		
		try {
			System.out.println(anaysis.getPrice());
			System.out.println(anaysis.getDeviceNum());
		}catch (Exception e) {
			// TODO: handle exception
		}
		
		System.out.println(anaysis.getUserNum());
		System.out.println(anaysis.getUpTime());
		for(UpRecordDto upRecordDto : anaysis.getUpRecordDtos()) {
			System.out.println(upRecordDto);
		}
		String headerInfo = "@@1064812345678IP:10.66.43.22##33";
		System.out.println(headerInfo.substring(headerInfo.indexOf("@@")+2,headerInfo.indexOf("IP")));
		System.out.println(headerInfo.substring(headerInfo.indexOf("##")+2,headerInfo.indexOf("##")+4));
		
		byte[] data = new byte[] {0x3C,0x00,0x0F,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
		String format = df.format(new Date());
		byte[] hexStringToBytes = Util.hexStringToBytes(format);
		for(int i=0;i<hexStringToBytes.length;i++) {
			data[i+4] = hexStringToBytes[i];
		}
		System.out.println(bytesToHexString(data, 0, data.length," "));
	}
	
	
	/**
	 * 50字节一桢
	 * @return
	 */
	public List<UpRecordDto> getUpRecordDtos() throws AnaysisException{
		if(anaysisType() != ResponseType.upRecordsResponse) {
			return null;
		}
		if(lists != null) {
			return lists;
		}
		lists = new ArrayList<>();
		if((socketData.len-32)%50 != 0) {
			throw new AnaysisException("记录没有对齐");
		}
		float price;
		try {
			price = this.getPrice();
		}catch (Exception e) {
			// TODO: handle exception
			price = 0;
		}
		
		for(int i=-6;i<socketData.len-50;i+=50) {
			UpRecordDto upRecordDto = new UpRecordDto();
			try {
				upRecordDto.setColTime(df.parse(bytesToHexString(socketData.data, i+32, 6)).getTime());
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				throw new AnaysisException("记录时间无法解析： " + bytesToHexString(socketData.data, i+32, 6));
			}
			upRecordDto.setScSum(bytes2Double(socketData.data, i+38));
			upRecordDto.setWcSum(bytes2Double(socketData.data, i+46));
			upRecordDto.setScFlow(byte2Float(socketData.data, i+54));
			upRecordDto.setWcFlow(byte2Float(socketData.data, i+58));
			upRecordDto.setTemp(byte2Float(socketData.data, i+62));
			upRecordDto.setPress(byte2Float(socketData.data, i+66));
			upRecordDto.setUpTime(this.getUpTime().getTime());
			if(price == 0) {
				upRecordDto.setSurplusSum(bytes2Long(socketData.data, i+74)/100);
			}else {
				upRecordDto.setSurplusSum(bytes2Long(socketData.data, i+74)/price/100);
			}
			lists.add(upRecordDto);
		}
		
		return lists;
	}
	
	/**
	 * 
	 * @param data
	 * @param offset
	 * @param len
	 * @param div 保留2位小数则div = 100
	 * @return
	 */
	public static float changeBcdToFloat(byte[] data,int offset, int len, int div) {
		return (float)Long.parseLong(bytesToHexString(data, offset, len))/div;
	}
	public float getPrice() throws AnaysisException {
		if(anaysisType() != ResponseType.upRecordsResponse) {
			throw new AnaysisException("错误");
		}
		try {
			return changeBcdToFloat(socketData.data, socketData.len-6, 4, 10000);
		}catch (Exception e) {
			// TODO: handle exception
			throw new AnaysisException("价格解析出错: "+ e.getMessage());
		}
	}
	
	public String getDeviceNum() throws AnaysisException {
		if(anaysisType() != ResponseType.upRecordsResponse) {
			return null;
		}
		if(deviceNum != null) {
			return deviceNum;
		}
		deviceNum = bytesToHexString(socketData.data, 4, 8);
		return deviceNum;
	}
	public String getLocalNum() throws AnaysisException {
		if(anaysisType() != ResponseType.upRecordsResponse) {
			return null;
		}
		if(localNum != null) {
			return localNum;
		}
		localNum = bytesToHexString(socketData.data, 12, 8);
		return localNum;
	}
	public String getUserNum() throws AnaysisException {
		if(anaysisType() != ResponseType.upRecordsResponse) {
			return null;
		}
		if(userNum !=null) {
			return userNum;
		}
		userNum = bytesToHexString(socketData.data, 20, 6);
		return userNum;
	}
	public Date getUpTime() throws AnaysisException {
		if(anaysisType() != ResponseType.upRecordsResponse) {
			return null;
		}
		if(upTime !=null) {
			return upTime;
		}
		try {
			upTime = df.parse(bytesToHexString(socketData.data, 26, 6));
		} catch (ParseException e) {
			throw new AnaysisException("时间格式错误： "+bytesToHexString(socketData.data, 25, 6));
		}
		return upTime;
	}
	
}
